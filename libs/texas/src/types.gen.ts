// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseUrl: "https://raw.githubusercontent.com" | (string & {});
};

/**
 * RFC 6749 error response from section 5.2.
 */
export type ErrorResponse = {
  error: OAuthErrorCode;
  error_description: string;
};

/**
 * Identity providers for use with token fetch, exchange and introspection.
 */
export type IdentityProvider =
  | "azuread"
  | "tokenx"
  | "maskinporten"
  | "idporten";

/**
 * This data type holds the OAuth token that will be validated in the introspect endpoint.
 */
export type IntrospectRequest = {
  identity_provider: IdentityProvider;
  token: string;
};

/**
 * Based on RFC 7662 introspection response from section 2.2.
 *
 * Claims from the original token are copied verbatim to the introspection response as additional properties.
 * The claims present depend on the identity provider.
 * Please refer to the Nais documentation for details:
 *
 * - [Azure AD](https://doc.nais.io/auth/entra-id/reference/#claims)
 * - [IDPorten](https://doc.nais.io/auth/idporten/reference/#claims)
 * - [Maskinporten](https://doc.nais.io/auth/maskinporten/reference/#claims)
 * - [TokenX](https://doc.nais.io/auth/tokenx/reference/#claims)
 */
export type IntrospectResponse = {
  /**
   * Indicates whether the token is valid. If this field is _false_,
   * the token is invalid and *must* be rejected.
   */
  active: boolean;
  /**
   * If the token is invalid, this field contains the reason.
   */
  error?: string | null;
  [key: string]: unknown | boolean | string | null | undefined;
};

/**
 * Known OAuth error codes from RFC 6749. Unknown variants may still be returned as these are propagated from the upstream identity provider.
 */
export type OAuthErrorCode =
  | "invalid_request"
  | "invalid_client"
  | "invalid_grant"
  | "unauthorized_client"
  | "unsupported_grant_type"
  | "invalid_scope"
  | "server_error";

/**
 * Use this data type to exchange a user token for a machine token.
 */
export type TokenExchangeRequest = {
  identity_provider: IdentityProvider;
  /**
   * Force renewal of token. Defaults to false if omitted.
   */
  skip_cache?: boolean | null;
  /**
   * Scope or identifier for the target application.
   */
  target: string;
  /**
   * The user's access token, usually found in the _Authorization_ header in requests to your application.
   */
  user_token: string;
};

/**
 * Use this data type to request a machine token.
 */
export type TokenRequest = {
  identity_provider: IdentityProvider;
  /**
   * Resource indicator for audience-restricted tokens (RFC 8707).
   */
  resource?: string | null;
  /**
   * Force renewal of token. Defaults to false if omitted.
   */
  skip_cache?: boolean | null;
  /**
   * Scope or identifier for the target application.
   */
  target: string;
};

/**
 * RFC 6749 token response from section 5.1.
 */
export type TokenResponse = {
  access_token: string;
  /**
   * Token expiry in seconds. Useful for caching purposes.
   */
  expires_in: number;
  token_type: TokenType;
};

/**
 * Token type is always Bearer, but this might change in the future.
 */
export type TokenType = "Bearer";

export type IntrospectData = {
  /**
   * Validate a token and return its claims and metadata. The response object's _active_ field will be set to either true or false for valid and invalid tokens, respectively. The identity provider determines which claims are returned. Please see the examples and/or Nais documentation for details.
   */
  body: IntrospectRequest;
  path?: never;
  query?: never;
  url: "/api/v1/introspect";
};

export type IntrospectResponses = {
  /**
   * Success
   */
  200: IntrospectResponse;
};

export type IntrospectResponse2 =
  IntrospectResponses[keyof IntrospectResponses];

export type TokenData = {
  /**
   * Request a machine-to-machine token from the specified identity provider and for a given target.
   */
  body: TokenRequest;
  path?: never;
  query?: never;
  url: "/api/v1/token";
};

export type TokenErrors = {
  /**
   * Bad request
   */
  400: ErrorResponse;
  /**
   * Server error
   */
  500: ErrorResponse;
};

export type TokenError = TokenErrors[keyof TokenErrors];

export type TokenResponses = {
  /**
   * Success
   */
  200: TokenResponse;
};

export type TokenResponse2 = TokenResponses[keyof TokenResponses];

export type TokenExchangeData = {
  /**
   * Exchange a user's token for a machine token, scoped to the given target. The returned token allows your application to act on behalf of the user.
   */
  body: TokenExchangeRequest;
  path?: never;
  query?: never;
  url: "/api/v1/token/exchange";
};

export type TokenExchangeErrors = {
  /**
   * Bad request
   */
  400: ErrorResponse;
  /**
   * Server error
   */
  500: ErrorResponse;
};

export type TokenExchangeError = TokenExchangeErrors[keyof TokenExchangeErrors];

export type TokenExchangeResponses = {
  /**
   * Success
   */
  200: TokenResponse;
};

export type TokenExchangeResponse =
  TokenExchangeResponses[keyof TokenExchangeResponses];
